// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                       @id @default(uuid())
  name                       String
  type                       String
  nickName                   String?                      @unique
  email                      String                       @unique
  password                   String
  avatar                     String?
  Comment                    CommentInPost[]
  likesInComment             LikeInComment[]
  Forum                      Forum[]
  //CommentInForum             CommentInForum[]
  LikeInForum                LikeInForum[]
  responseComment            ResponseComment[]
  LikeInResponseComment      LikeInResponseComment[]
  DenounceComment            Denounce[]
  ResponseCommentInForum     ResponseCommentInForum[]
  LikeInResponseCommentForum LikeInResponseCommentForum[]
  DenounceInForum            DenounceInForum[]
  Notification               Notification[]
  CommentInArticle           CommentInArticle[]

  @@map("users")
}

// model UserADM {
//   id       String @id @default(uuid())
//   name     String
//   email    String @unique
//   password String

//   @@map("userAdm")
// }

model Post {
  id                    String                  @id @default(uuid())
  contentPost           String                  @db.Text()
  contentPreComment     String
  date                  DateTime                @default(now())
  updatedAt             DateTime                @updatedAt()
  title                 String
  slug                  String                  @unique
  subTitle              String
  mainNewsShow          Boolean                 @default(false)
  slideShow             Boolean                 @default(false)
  newsShow              Boolean                 @default(false)
  summaryParagraph      String
  qtComments            Int?
  img                   String?
  legendImg             String?
  authorPost            String?
  video                 String?
  instagram             String?
  Comment               CommentInPost[]
  likesInComment        LikeInComment[]
  responseComment       ResponseComment[]
  LikeInResponseComment LikeInResponseComment[]

  @@map("posts")
}

model Article {
  id                    String                  @id @default(uuid())
  title                 String
  slug                  String                  @unique
  subTitle              String
  contentArticle        String                  @db.Text()
  title2                String?
  contentTitle2         String?                 @db.Text()
  title3                String?
  contentTitle3         String?                 @db.Text()
  title4                String?
  contentTitle4         String?                 @db.Text()
  title5                String?
  contentTitle5         String?                 @db.Text()
  title6                String?
  contentTitle6         String?                 @db.Text()
  title7                String?
  contentTitle7         String?                 @db.Text()
  title8                String?
  contentTitle8         String?                 @db.Text()
  title9                String?
  contentTitle9         String?                 @db.Text()
  title10               String?
  contentTitle10        String?                 @db.Text()
  contentPreComment     String
  date                  DateTime                @default(now())
  updatedAt             DateTime                @updatedAt()
  articleShow           Boolean                 @default(false)
  summaryParagraph      String
  qtComments            Int?
  img                   String?
  legendImg             String?
  authorArticle         String?
  video                 String?
  instagram             String?
  Comment               CommentInPost[]
  likesInComment        LikeInComment[]
  responseComment       ResponseComment[]
  LikeInResponseComment LikeInResponseComment[]
  //CommentInForum        CommentInForum[]
  CommentInArticle      CommentInArticle[]

  @@map("articles")
}

model CommentInPost {
  id                     String            @id @default(uuid())
  post_id                String
  user_id                String
  nameUserInComment      String
  imgUserInComment       String
  date                   DateTime          @default(now())
  comment                String
  id_commentReply        String?
  nameUserReplyComment   String?
  nickName               String?
  imgUserReplyComment    String?
  userNameCommentReply   String?
  userAvatarCommentReply String?
  qtLikes                Int?
  likeShow               Boolean?          @default(false)
  commentShow            Boolean?          @default(true)
  commentModerationShow  Boolean?          @default(true)
  dateCommentReply       DateTime?
  commentReply           String?
  postId                 Post              @relation(fields: [post_id], references: [id], onDelete: Cascade)
  userId                 User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  likesInComment         LikeInComment[]
  responseComment        ResponseComment[]
  Article                Article?          @relation(fields: [articleId], references: [id])
  articleId              String?

  @@map("comments")
}

model ResponseComment {
  id                     String        @id @default(uuid())
  post_id                String
  user_id                String
  id_comment             String
  nameUser               String
  nickName               String?
  imgUser                String
  userNameCommentReply   String
  userAvatarCommentReply String
  userCommentReply       String?
  dateCommentReply       DateTime
  qtLikes                Int?
  likeShow               Boolean?      @default(false)
  commentShow            Boolean?      @default(true)
  commentModerationShow  Boolean?      @default(true)
  date                   DateTime      @default(now())
  comment_response       String
  postId                 Post          @relation(fields: [post_id], references: [id], onDelete: Cascade)
  userId                 User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  commentId              CommentInPost @relation(fields: [id_comment], references: [id], onDelete: Cascade)

  likesInComment LikeInResponseComment[]
  Article        Article?                @relation(fields: [articleId], references: [id])
  articleId      String?

  @@map("response_comments")
}

model LikeInComment {
  id         String        @id @default(uuid())
  post_id    String
  user_id    String
  comment_id String
  done       Boolean       @default(true)
  postId     Post          @relation(fields: [post_id], references: [id], onDelete: Cascade)
  userId     User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  commentId  CommentInPost @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  Article    Article?      @relation(fields: [articleId], references: [id])
  articleId  String?

  @@map("likeInComments")
}

model LikeInResponseComment {
  id                String          @id @default(uuid())
  post_id           String
  user_id           String
  comment_id        String
  done              Boolean         @default(true)
  likeShow          Boolean         @default(true)
  postId            Post            @relation(fields: [post_id], references: [id], onDelete: Cascade)
  userId            User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  commentResponseId ResponseComment @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  Article           Article?        @relation(fields: [articleId], references: [id])
  articleId         String?

  @@map("likeInResponseComments")
}

model Forum {
  id                         String                       @id @default(uuid())
  title                      String
  description                String
  user_id                    String
  date                       DateTime?                    @default(now())
  avatar_user                String?
  nickName                   String?
  name_user                  String?
  nameLastComment            String?
  qtComments                 Int?
  userId                     User                         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  //CommentInForum             CommentInForum[]
  LikeInForum                LikeInForum[]
  ResponseCommentInForum     ResponseCommentInForum[]
  LikeInResponseCommentForum LikeInResponseCommentForum[]

  @@map("forums")
}

model CommentInArticle {
  id                     String                   @id @default(uuid())
  id_comment_forum       String?
  forum_id               String
  user_id                String
  date                   DateTime                 @default(now())
  comment                String
  nameUserInComment      String?
  nickName               String?
  imgUserInComment       String?
  id_commentReply        String?
  nameUserReplyComment   String?
  imgUserReplyComment    String?
  userNameCommentReply   String?
  userAvatarCommentReply String?
  qtLikes                Int?
  likeShow               Boolean?                 @default(false)
  commentShow            Boolean?                 @default(true)
  commentModerationShow  Boolean?                 @default(true)
  dateCommentReply       DateTime?
  commentReply           String?
  forumId                Article                  @relation(fields: [forum_id], references: [id], onDelete: Cascade)
  userId                 User                     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  LikeInForum            LikeInForum[]
  ResponseCommentInForum ResponseCommentInForum[]

  @@map("commentInArticles")
}

model ResponseCommentInForum {
  id                         String                       @id @default(uuid())
  forum_id                   String
  user_id                    String
  id_commentForum            String
  nameUser                   String
  imgUser                    String
  nickName                   String?
  userNameCommentReply       String
  userAvatarCommentReply     String
  userCommentReply           String?
  dateCommentReply           DateTime
  qtLikes                    Int?
  likeShow                   Boolean?                     @default(false)
  commentShow                Boolean?                     @default(true)
  commentModerationShow      Boolean?                     @default(true)
  date                       DateTime                     @default(now())
  comment_response           String
  forumId                    Forum                        @relation(fields: [forum_id], references: [id], onDelete: Cascade)
  userId                     User                         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  //commentForumId             CommentInForum               @relation(fields: [id_commentForum], references: [id], onDelete: Cascade)
  LikeInResponseCommentForum LikeInResponseCommentForum[]
  CommentInArticle           CommentInArticle?            @relation(fields: [commentInArticleId], references: [id])
  commentInArticleId         String?

  @@map("response_comments_forum")
}

model LikeInForum {
  id                 String            @id @default(uuid())
  forum_id           String
  done               Boolean           @default(true)
  user_id            String
  commentInForum_id  String
  forumId            Forum             @relation(fields: [forum_id], references: [id], onDelete: Cascade)
  userId             User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  //commentId         CommentInForum @relation(fields: [commentInForum_id], references: [id], onDelete: Cascade)
  CommentInArticle   CommentInArticle? @relation(fields: [commentInArticleId], references: [id])
  commentInArticleId String?

  @@map("likeInForums")
}

model LikeInResponseCommentForum {
  id                     String                 @id @default(uuid())
  forum_id               String
  user_id                String
  commentForum_id        String
  done                   Boolean                @default(true)
  likeShow               Boolean                @default(true)
  forumId                Forum                  @relation(fields: [forum_id], references: [id], onDelete: Cascade)
  userId                 User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  commentResponseForumId ResponseCommentInForum @relation(fields: [commentForum_id], references: [id], onDelete: Cascade)

  @@map("likeInResponseCommentsForum")
}

model Denounce {
  id                        String  @id @default(uuid())
  user_id                   String
  nameUser                  String
  userDenounced_id          String?
  nameUserDenounced         String?
  textDenounce              String?
  describingDenounce        String?
  post_id                   String?
  id_comment                String?
  id_response_comment       String?
  id_forum                  String?
  id_forum_comment          String?
  id_forum_comment_response String?
  done                      Boolean @default(false)
  userId                    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("denounces")
}

model DenounceInForum {
  id                        String  @id @default(uuid())
  user_id                   String
  nameUser                  String
  userDenounced_id          String?
  nameUserDenounced         String?
  textDenounce              String?
  describingDenounce        String?
  forum_id                  String?
  id_comment                String?
  id_response_comment       String?
  id_forum                  String?
  id_forum_comment          String?
  id_forum_comment_response String?
  done                      Boolean @default(false)
  userId                    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("denouncesInForum")
}

model Notification {
  id       String  @id @default(uuid())
  user_id  String
  forum_id String?
  post_id  String?
  msg      String
  userId   User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}
